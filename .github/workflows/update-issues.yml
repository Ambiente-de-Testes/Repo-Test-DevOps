name: Update Issues on Private Repos

on:
  create:

jobs:
  update-project:
    runs-on: ubuntu-latest
    # S√≥ executa se for uma branch
    if: github.event.ref_type == 'branch'
    
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.UPDATE_TOKEN }}
          script: |
            const projectId = "PVT_kwDODixzhM4BFb_a";
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
            
            // ‚ö†Ô∏è IMPORTANTE: Voc√™ precisa dos IDs dos status, n√£o os nomes
            // Vamos buscar primeiro e depois voc√™ ajusta
            const STATUS_EM_DESENVOLVIMENTO = "823324b0"; // Substitua pelo ID real

            console.log(`üåø Branch criada: ${context.payload.ref}`);
            
            // Extrai n√∫mero da issue/PR do nome da branch
            const branchName = context.payload.ref;
            const match = branchName.match(/(\d+)/);
            
            if (!match) {
              console.log("‚ö†Ô∏è Nenhum n√∫mero de issue encontrado na branch");
              console.log(`üí° Use padr√µes como: 33-descricao, issue-33, feature/33-nome`);
              return;
            }
            
            const issueNumber = parseInt(match[1], 10);
            console.log(`üîç Issue #${issueNumber} detectada`);
            
            // Busca a issue via REST API
            try {
              const { data: issue } = await github.rest.issues.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber
              });
              
              console.log(`‚úÖ Issue encontrada: #${issue.number} - ${issue.title}`);
              const issueNodeId = issue.node_id;
              
              // Busca o item no projeto
              console.log(`\nüîç Buscando no projeto...`);
              const projectQuery = `
                query ($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      title
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue { 
                              id 
                              number
                              title
                            }
                            ... on PullRequest {
                              id
                              number
                              title
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery, { projectId });
              console.log(`‚úÖ Projeto acessado: ${projectData.node.title}`);
              
              const items = projectData.node.items.nodes;
              const projectItem = items.find(i => i.content?.id === issueNodeId);
              
              if (!projectItem) {
                console.log(`‚ö†Ô∏è Issue #${issueNumber} n√£o est√° no projeto`);
                console.log(`üí° Adicione manualmente ou use actions/add-to-project`);
                return;
              }
              
              console.log(`‚úÖ Item encontrado no projeto`);
              
              // Atualiza o status
              console.log(`\nüîÑ Movendo para "Em Desenvolvimento"...`);
              
              const updateMutation = `
                mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { 
                      singleSelectOptionId: $value 
                    }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(updateMutation, {
                projectId: projectId,
                itemId: projectItem.id,
                fieldId: statusFieldId,
                value: STATUS_EM_DESENVOLVIMENTO
              });
              
              console.log(`üéâ Status atualizado com sucesso!`);
              
            } catch (error) {
              console.error(`‚ùå Erro: ${error.message}`);
              throw error;
            }
