name: Update Project Status

on:
  push:
    branches:
      - "*-teste-*"

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    steps:
      - name: Extrair n√∫mero da issue a partir da branch
        id: extract
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          echo "Branch atual: $BRANCH_NAME"
          ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -oE '^[0-9]+')
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "‚ùå Nenhum n√∫mero de issue encontrado na branch."
            exit 1
          fi
          echo "N√∫mero da issue detectado: $ISSUE_NUMBER"
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT

      - name: Atualizar status no GitHub Project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_PROJECT }}
          script: |
            const issueNumber = parseInt('${{ steps.extract.outputs.issue_number }}');
            const projectId = "PVT_kwDODixzhM4BFb_a"; // Substitua pelo ID do seu ProjectV2
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E"; // Substitua pelo ID do campo "Status"
            const newStatus = "Em andamento"; // Valor que deseja aplicar

            console.log(`ü™∂ Atualizando issue #${issueNumber} no projeto ${projectId}`);

            // 1Ô∏è‚É£ Buscar issue
            const { repository } = await github.graphql(
              `
              query($owner:String!, $repo:String!, $issueNumber:Int!) {
                repository(owner:$owner, name:$repo) {
                  issue(number:$issueNumber) {
                    id
                    title
                  }
                }
              }
              `,
              {
                owner: context.repo.owner,
                repo: context.repo.repo,
                issueNumber
              }
            );

            const issue = repository?.issue;
            if (!issue) {
              core.setFailed(`‚ùå Issue #${issueNumber} n√£o encontrada no reposit√≥rio.`);
              return;
            }

            console.log(`üìå Issue encontrada: ${issue.title} (${issue.id})`);

            // 2Ô∏è‚É£ Buscar o item do projeto vinculado a essa issue
            const projectItems = await github.graphql(
              `
              query($projectId:ID!, $issueId:ID!) {
                node(id:$projectId) {
                  ... on ProjectV2 {
                    items(first:100) {
                      nodes {
                        id
                        content {
                          ... on Issue { id }
                        }
                      }
                    }
                  }
                }
              }
              `,
              { projectId, issueId: issue.id }
            );

            const projectItem = projectItems.node.items.nodes.find(i => i.content?.id === issue.id);

            if (!projectItem) {
              core.setFailed(`‚ùå A issue #${issueNumber} n√£o est√° vinculada ao projeto.`);
              return;
            }

            console.log(`‚úÖ Item do projeto encontrado: ${projectItem.id}`);

            // 3Ô∏è‚É£ Atualizar o campo de status
            await github.graphql(
              `
              mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $value:String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId:$projectId
                    itemId:$itemId
                    fieldId:$fieldId
                    value:{ singleSelectOptionName:$value }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
              `,
              {
                projectId,
                itemId: projectItem.id,
                fieldId: statusFieldId,
                value: newStatus
              }
            );

            console.log(`üéØ Status da issue #${issueNumber} atualizado para "${newStatus}" com sucesso!`);
