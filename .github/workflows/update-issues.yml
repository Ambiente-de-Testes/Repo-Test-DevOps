name: Update Issues on Private Repos

on:
  issues:
    types: [opened, closed]
  pull_request:
    types: [opened, closed]
  create:

jobs:
  update-project:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      pull-requests: read
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const projectId = "PVT_kwDODixzhM4BFb_a";
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
            const org = "Ambiente-de-Testes";
            const repoName = "Repo-Test-DevOps";

            async function moveIssueToStatus(itemId, statusName) {
              try {
                const mutation = `
                  mutation ($projectId: ID!, $itemId: ID!, $statusFieldId: ID!, $statusName: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $statusFieldId
                      value: { 
                        singleSelectOptionId: $statusName 
                      }
                    }) {
                      projectV2Item { 
                        id 
                      }
                    }
                  }
                `;
                
                const result = await github.graphql(mutation, { 
                  projectId, 
                  itemId, 
                  statusFieldId, 
                  statusName 
                });
                
                console.log(`‚úÖ Status atualizado para: ${statusName}`);
                return result;
              } catch (error) {
                console.error("‚ùå Erro ao atualizar status:", error.message);
                throw error;
              }
            }

            async function getProjectItemId(issueNodeId) {
              try {
                const query = `
                  query ($org: String!, $projectNumber: Int!) {
                    organization(login: $org) {
                      projectV2(number: $projectNumber) {
                        items(first: 100) {
                          nodes {
                            id
                            content {
                              ... on Issue { 
                                id 
                                number 
                              }
                              ... on PullRequest {
                                id
                                number
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                // Extrair o n√∫mero do projeto do ID se necess√°rio
                // Ou use diretamente se souber o n√∫mero
                const res = await github.graphql(query, { 
                  org, 
                  projectNumber: 1 // Ajuste conforme seu projeto
                });
                
                const items = res.organization.projectV2.items.nodes;
                const item = items.find(i => i.content?.id === issueNodeId);
                
                if (item) {
                  console.log(`‚úÖ Item encontrado no projeto: ${item.id}`);
                } else {
                  console.log("‚ö†Ô∏è Item n√£o encontrado no projeto");
                }
                
                return item?.id;
              } catch (error) {
                console.error("‚ùå Erro ao buscar item do projeto:", error.message);
                throw error;
              }
            }

            let issueNodeId;
            let eventType = "";

            // Detectar tipo de evento e obter node_id
            if (context.payload.issue) {
              issueNodeId = context.payload.issue.node_id;
              eventType = `issue_${context.payload.action}`;
              console.log(`üìã Issue #${context.payload.issue.number} - ${context.payload.action}`);
            } else if (context.payload.pull_request) {
              issueNodeId = context.payload.pull_request.node_id;
              eventType = `pr_${context.payload.action}`;
              console.log(`üîÄ PR #${context.payload.pull_request.number} - ${context.payload.action}`);
            } else if (context.eventName === "create" && context.payload.ref_type === "branch") {
              const branchName = context.payload.ref;
              console.log(`üåø Nova branch criada: ${branchName}`);

              // Tenta extrair n√∫mero da issue (ex: issue-39, 39-descricao, feature/39-nome)
              const match = branchName.match(/(\d+)/);
              
              if (match) {
                const issueNumber = parseInt(match[1], 10);
                console.log(`üîç N√∫mero da issue detectado: ${issueNumber}`);

                try {
                  // Busca o ID da issue
                  const issueQuery = `
                    query ($owner: String!, $repo: String!, $issueNumber: Int!) {
                      repository(owner: $owner, name: $repo) {
                        issue(number: $issueNumber) { 
                          id
                          title
                          state
                        }
                      }
                    }
                  `;
                  
                  const issueData = await github.graphql(issueQuery, { 
                    owner: org,
                    repo: repoName,
                    issueNumber: issueNumber
                  });

                  if (issueData?.repository?.issue) {
                    issueNodeId = issueData.repository.issue.id;
                    eventType = "branch_created";
                    console.log(`‚úÖ Issue encontrada: #${issueNumber} - ${issueData.repository.issue.title}`);
                  }
                } catch (error) {
                  console.error(`‚ùå Erro ao buscar issue #${issueNumber}:`, error.message);
                }
              } else {
                console.log("‚ö†Ô∏è Nenhum n√∫mero de issue encontrado no nome da branch");
              }
            }

            if (!issueNodeId) {
              console.log("‚ö†Ô∏è Nenhuma issue ou PR encontrada no evento atual.");
              return;
            }

            const itemId = await getProjectItemId(issueNodeId);
            
            if (!itemId) {
              console.log("‚ö†Ô∏è Item n√£o encontrado no projeto. Certifique-se de que foi adicionado ao projeto.");
              return;
            }

            // Mapeamento de status (ajuste os IDs conforme seus status no projeto)
            let targetStatus = null;

            if (context.eventName === "issues" && context.payload.action === "opened") {
              targetStatus = "N√£o Iniciado";
              console.log("üìå Movendo para: N√£o Iniciado");
            }
            
            if (eventType === "branch_created") {
              targetStatus = "Em Desenvolvimento";
              console.log("üî® Movendo para: Em Desenvolvimento");
            }
            
            if (context.eventName === "issues" && context.payload.action === "closed") {
              targetStatus = "Em Testes";
              console.log("üß™ Movendo para: Em Testes");
            }
            
            if (context.eventName === "pull_request" && context.payload.action === "opened") {
              targetStatus = "Aguardando Atualiza√ß√£o";
              console.log("‚è≥ Movendo para: Aguardando Atualiza√ß√£o");
            }
            
            if (context.eventName === "pull_request" && 
                context.payload.action === "closed" && 
                context.payload.pull_request.merged) {
              targetStatus = "Atualizado (Conclu√≠do)";
              console.log("‚úÖ Movendo para: Atualizado (Conclu√≠do)");
            }

            if (targetStatus) {
              await moveIssueToStatus(itemId, targetStatus);
              console.log("üéâ Status atualizado com sucesso!");
            } else {
              console.log("‚ö†Ô∏è Nenhuma a√ß√£o de atualiza√ß√£o necess√°ria para este evento");
            }
