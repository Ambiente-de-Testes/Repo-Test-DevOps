name: Update Issues on Private Repos

on:
  issues:
    types: [opened, closed]
  pull_request:
    types: [opened, closed]
  create:

jobs:
  update-project:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: read
      pull-requests: read
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = "PVT_kwDODixzhM4BFb_a";
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
            const org = "Ambiente-de-Testes";
            const repoName = "Repo-Test-DevOps";

            async function moveIssueToStatus(itemId, statusName) {
              try {
                const mutation = `
                  mutation ($projectId: ID!, $itemId: ID!, $statusFieldId: ID!, $statusName: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $statusFieldId
                      value: { 
                        singleSelectOptionId: $statusName 
                      }
                    }) {
                      projectV2Item { 
                        id 
                      }
                    }
                  }
                `;
                
                const result = await github.graphql(mutation, { 
                  projectId, 
                  itemId, 
                  statusFieldId, 
                  statusName 
                });
                
                console.log(`‚úÖ Status atualizado para: ${statusName}`);
                return result;
              } catch (error) {
                console.error("‚ùå Erro ao atualizar status:", error.message);
                throw error;
              }
            }

            async function getProjectItemId(contentNodeId) {
              try {
                const query = `
                  query ($projectId: ID!) {
                    node(id: $projectId) {
                      ... on ProjectV2 {
                        items(first: 100) {
                          nodes {
                            id
                            content {
                              ... on Issue { 
                                id 
                                number
                                title
                              }
                              ... on PullRequest {
                                id
                                number
                                title
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                `;
                
                const res = await github.graphql(query, { projectId });
                const items = res.node.items.nodes;
                const item = items.find(i => i.content?.id === contentNodeId);
                
                if (item) {
                  console.log(`‚úÖ Item encontrado no projeto: ${item.content.title}`);
                } else {
                  console.log("‚ö†Ô∏è Item n√£o encontrado no projeto. O item precisa ser adicionado ao projeto primeiro.");
                }
                
                return item?.id;
              } catch (error) {
                console.error("‚ùå Erro ao buscar item do projeto:", error.message);
                throw error;
              }
            }

            async function findIssueOrPR(number) {
              // Tenta buscar como Issue primeiro
              try {
                const issueQuery = `
                  query ($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      issue(number: $number) { 
                        id
                        number
                        title
                        state
                      }
                    }
                  }
                `;
                
                const issueData = await github.graphql(issueQuery, { 
                  owner: org,
                  repo: repoName,
                  number: number
                });

                if (issueData?.repository?.issue) {
                  console.log(`‚úÖ Issue encontrada: #${number} - ${issueData.repository.issue.title}`);
                  return {
                    type: 'issue',
                    nodeId: issueData.repository.issue.id,
                    data: issueData.repository.issue
                  };
                }
              } catch (issueError) {
                console.log(`‚ÑπÔ∏è N√£o √© uma issue, tentando como PR...`);
              }

              // Se n√£o for issue, tenta como PR
              try {
                const prQuery = `
                  query ($owner: String!, $repo: String!, $number: Int!) {
                    repository(owner: $owner, name: $repo) {
                      pullRequest(number: $number) { 
                        id
                        number
                        title
                        state
                      }
                    }
                  }
                `;
                
                const prData = await github.graphql(prQuery, { 
                  owner: org,
                  repo: repoName,
                  number: number
                });

                if (prData?.repository?.pullRequest) {
                  console.log(`‚úÖ PR encontrado: #${number} - ${prData.repository.pullRequest.title}`);
                  return {
                    type: 'pr',
                    nodeId: prData.repository.pullRequest.id,
                    data: prData.repository.pullRequest
                  };
                }
              } catch (prError) {
                console.log(`‚ùå N√£o √© um PR v√°lido`);
              }

              return null;
            }

            let issueNodeId;
            let eventType = "";

            // Detectar tipo de evento e obter node_id
            if (context.payload.issue) {
              issueNodeId = context.payload.issue.node_id;
              eventType = `issue_${context.payload.action}`;
              console.log(`üìã Issue #${context.payload.issue.number} - ${context.payload.action}`);
            } else if (context.payload.pull_request) {
              issueNodeId = context.payload.pull_request.node_id;
              eventType = `pr_${context.payload.action}`;
              console.log(`üîÄ PR #${context.payload.pull_request.number} - ${context.payload.action}`);
            } else if (context.eventName === "create" && context.payload.ref_type === "branch") {
              const branchName = context.payload.ref;
              console.log(`üåø Nova branch criada: ${branchName}`);

              // Tenta extrair n√∫mero da issue/PR (ex: issue-39, 39-descricao, feature/39-nome)
              const match = branchName.match(/(\d+)/);
              
              if (match) {
                const itemNumber = parseInt(match[1], 10);
                console.log(`üîç N√∫mero detectado: ${itemNumber}`);

                const found = await findIssueOrPR(itemNumber);
                
                if (found) {
                  issueNodeId = found.nodeId;
                  eventType = "branch_created";
                } else {
                  console.log(`‚ö†Ô∏è Item #${itemNumber} n√£o encontrado no reposit√≥rio ${org}/${repoName}`);
                  console.log(`üí° Verifique se:`);
                  console.log(`   - A issue/PR existe`);
                  console.log(`   - O n√∫mero no nome da branch est√° correto`);
                  console.log(`   - O workflow tem permiss√µes adequadas`);
                }
              } else {
                console.log("‚ö†Ô∏è Nenhum n√∫mero de issue/PR encontrado no nome da branch");
                console.log(`üí° Padr√µes suportados: 33-nome, issue-33, feature/33-nome`);
              }
            }

            if (!issueNodeId) {
              console.log("‚ö†Ô∏è Nenhuma issue ou PR identificada no evento atual.");
              return;
            }

            const itemId = await getProjectItemId(issueNodeId);
            
            if (!itemId) {
              console.log("‚ö†Ô∏è Item n√£o encontrado no projeto.");
              console.log(`üí° Para adicionar automaticamente ao projeto, adicione este step antes:`);
              console.log(`
              - name: Add to project
                uses: actions/add-to-project@v0.5.0
                with:
                  project-url: https://github.com/orgs/${org}/projects/[NUMERO]
                  github-token: \${{ secrets.PROJECT_TOKEN }}
              `);
              return;
            }

            // Mapeamento de status
            let targetStatus = null;

            if (context.eventName === "issues" && context.payload.action === "opened") {
              targetStatus = "N√£o Iniciado";
              console.log("üìå A√ß√£o: Issue aberta ‚Üí N√£o Iniciado");
            }
            
            if (eventType === "branch_created") {
              targetStatus = "Em Desenvolvimento";
              console.log("üî® A√ß√£o: Branch criada ‚Üí Em Desenvolvimento");
            }
            
            if (context.eventName === "issues" && context.payload.action === "closed") {
              targetStatus = "Em Testes";
              console.log("üß™ A√ß√£o: Issue fechada ‚Üí Em Testes");
            }
            
            if (context.eventName === "pull_request" && context.payload.action === "opened") {
              targetStatus = "Aguardando Atualiza√ß√£o";
              console.log("‚è≥ A√ß√£o: PR aberto ‚Üí Aguardando Atualiza√ß√£o");
            }
            
            if (context.eventName === "pull_request" && 
                context.payload.action === "closed" && 
                context.payload.pull_request.merged) {
              targetStatus = "Atualizado (Conclu√≠do)";
              console.log("‚úÖ A√ß√£o: PR merged ‚Üí Atualizado (Conclu√≠do)");
            }

            if (targetStatus) {
              await moveIssueToStatus(itemId, targetStatus);
              console.log("üéâ Workflow conclu√≠do com sucesso!");
            } else {
              console.log("‚ö†Ô∏è Nenhuma a√ß√£o de atualiza√ß√£o necess√°ria para este evento");
            }
