name: Atualizar Issue ao Criar Branch

on:
  create:
    branches:
      - "*"

jobs:
  update-issue:
    runs-on: ubuntu-latest

    steps:
      - name: Rodar script do GitHub
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const branchName = process.env.GITHUB_REF.replace('refs/heads/', '');
            console.log(`Nova branch criada: ${branchName}`);

            // Extrai o n√∫mero da issue do nome da branch
            const match = branchName.match(/^(\d+)-/);
            if (!match) {
              console.log('‚ùå Nenhum n√∫mero de issue encontrado na branch.');
              return;
            }

            const issueNumber = parseInt(match[1]);
            console.log(`N√∫mero da issue detectado: ${issueNumber}`);

            const org = 'Ambiente-de-Testes';
            const repo = 'Repo-Test-DevOps';

            // Busca a issue pelo n√∫mero via GraphQL
            const query = `
              query ($org: String!, $repo: String!, $issueNumber: Int!) {
                organization(login: $org) {
                  repository(name: $repo) {
                    issue(number: $issueNumber) {
                      id
                      title
                      number
                    }
                  }
                }
              }
            `;

            const result = await github.graphql(query, {
              org,
              repo,
              issueNumber
            });

            const issue = result.organization.repository.issue;
            if (!issue) {
              console.log('‚ö†Ô∏è Nenhuma issue encontrada para esse n√∫mero.');
              return;
            }

            console.log(`‚úÖ Issue encontrada: #${issue.number} - ${issue.title}`);
            console.log(`üÜî ID interno: ${issue.id}`);

            // Exemplo: atualizar Project ou Status da issue
            // const projectId = "PVT_kwDODixzhM4BFb_a";
            // const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
            // await github.graphql(
            //   `
            //     mutation($projectId: ID!, $issueId: ID!, $statusFieldId: ID!, $value: String!) {
            //       updateProjectV2ItemFieldValue(
            //         input: {
            //           projectId: $projectId
            //           itemId: $issueId
            //           fieldId: $statusFieldId
            //           value: { singleSelectOptionId: $value }
            //         }
            //       ) {
            //         projectV2Item {
            //           id
            //         }
            //       }
            //     }
            //   `,
            //   {
            //     projectId,
            //     issueId: issue.id,
            //     statusFieldId,
            //     value: "TO_DO"
            //   }
            // );

            console.log('üöÄ Script conclu√≠do com sucesso!');
