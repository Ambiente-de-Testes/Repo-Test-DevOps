name: Update Issues on Private Repos

on:
  issues:
    types: [opened, closed]
  pull_request:
    types: [opened, closed]
  create:
    branches:
      - '**'  # qualquer branch criada

jobs:
  update-project:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const projectId = "PVT_kwDODixzhM4BFb_a"; // ProjectV2 ID
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E"; // Field ID do Status

            async function moveIssueToStatus(itemId, statusName) {
              const mutation = `
                mutation ($projectId: ID!, $itemId: ID!, $statusFieldId: ID!, $statusName: String!) {
                  updateProjectV2ItemField(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $statusFieldId,
                    value: { name: $statusName }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(mutation, { projectId, itemId, statusFieldId, statusName });
            }

            async function getProjectItemId(issueNumber) {
              const query = `
                query ($projectId: ID!, $issueNumber: Int!) {
                  organization(login: "SEU_ORG") {
                    projectV2(number: $projectId) {
                      items(query: $issueNumber) {
                        nodes { id }
                      }
                    }
                  }
                }
              `;
              const res = await github.graphql(query, { projectId, issueNumber });
              return res.organization.projectV2.items.nodes[0]?.id;
            }

            let itemId;
            if (context.payload.issue) {
              itemId = await getProjectItemId(context.payload.issue.number);
            } else if (context.payload.pull_request) {
              itemId = await getProjectItemId(context.payload.pull_request.number);
            } else {
              return;
            }

            if (!itemId) return;

            // Automação por evento
            if (context.eventName === "issues" && context.payload.action === "opened") {
              await moveIssueToStatus(itemId, "Não Iniciado");
            }

            if (context.eventName === "create") {
              await moveIssueToStatus(itemId, "Em Desenvolvimento");
            }

            if (context.eventName === "issues" && context.payload.action === "closed") {
              await moveIssueToStatus(itemId, "Em Testes");
            }

            if (context.eventName === "pull_request" && context.payload.action === "opened") {
              await moveIssueToStatus(itemId, "Aguardando Atualização");
            }

            if (context.eventName === "pull_request" && context.payload.action === "closed" && context.payload.pull_request.merged) {
              await moveIssueToStatus(itemId, "Atualizado (Concluído)");
            }
