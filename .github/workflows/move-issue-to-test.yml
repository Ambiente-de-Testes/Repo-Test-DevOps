name: Move Issue to Teste

on:
  pull_request:
    types: [opened]

jobs:
  update-project:
    runs-on: ubuntu-latest
    steps:
      - name: Extract issue number from PR
        id: extract
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          ISSUE_NUM=$(echo "$PR_BODY $PR_TITLE" | grep -oE "#[0-9]+" | head -1 | grep -oE "[0-9]+")
          echo "PR: ${{ github.event.pull_request.html_url }}"
          if [ -n "$ISSUE_NUM" ]; then
            echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT
            echo "✅ Issue referenciada: #$ISSUE_NUM"
          else
            echo "⚠️ Nenhum número de issue referenciado no PR"
            echo "issue_number=" >> $GITHUB_OUTPUT
          fi

      - name: Update Project Status (by Title from DevOps)
        if: steps.extract.outputs.issue_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEVSTATUS_TOKEN }}
          script: |
            const projectId = "PVT_kwDODixzhM4BFb_a";
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
            const STATUS_EM_TESTE = "47fc9ee4"; // Atualize conforme seu projeto

            // Número da issue do clone local (repo de código)
            const codeIssueNumber = ${{ steps.extract.outputs.issue_number }};
            const codeRepoOwner = context.repo.owner;
            const codeRepoName = context.repo.repo;

            // Busca a issue clonada no repo de código
            const { data: clonedIssue } = await github.rest.issues.get({
              owner: codeRepoOwner,
              repo: codeRepoName,
              issue_number: codeIssueNumber
            });

            // Busca TODAS issues abertas no DevOps (pode paginar se tiver muitas)
            let devopsIssues = [];
            let page = 1;
            let found = false;
            while (!found) {
              const { data: issuesPage } = await github.rest.issues.listForRepo({
                owner: 'Ambiente-de-Testes',
                repo: 'Repo-Test-DevOps',
                state: 'open',
                per_page: 100,
                page: page
              });
              devopsIssues = devopsIssues.concat(issuesPage);
              // Se menos de 100 vieram, acabou
              if (issuesPage.length < 100) found = true;
              page++;
            }

            // Procura a issue original pelo título
            const originalIssue = devopsIssues.find(i => i.title === clonedIssue.title);

            if (!originalIssue) {
              console.log('❌ Issue original não encontrada no DevOps!');
              return;
            }

            console.log(`✅ Issue original encontrada: #${originalIssue.number} - ${originalIssue.title}`);
            console.log(`🔗 ${originalIssue.html_url}`);
            const issueNodeId = originalIssue.node_id;

            // 2. Busca todos os itens do projeto (com paginação)
            let items = [];
            let cursor = null;
            let hasNextPage = true;

            while (hasNextPage) {
              const projectQuery = `
                query ($projectId: ID!, $after: String) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      items(first: 100, after: $after) {
                        pageInfo {
                          hasNextPage
                          endCursor
                        }
                        nodes {
                          id
                          content {
                            ... on Issue { id number title }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const projectData = await github.graphql(projectQuery, { projectId, after: cursor });
              const pageItems = projectData.node.items.nodes;
              items = items.concat(pageItems);
              hasNextPage = projectData.node.items.pageInfo.hasNextPage;
              cursor = projectData.node.items.pageInfo.endCursor;
            }

            // 3. Encontra o item correspondente
            const projectItem = items.find(i => i.content?.id === issueNodeId);

            if (!projectItem) {
              console.log(`⚠️ Issue #${originalIssue.number} não está no projeto`);
              console.log(`   Adicione a issue ao projeto primeiro: ${originalIssue.html_url}`);
              return;
            }
            console.log(`✅ Item encontrado no projeto`);

            // 4. Atualiza o status para "Em Teste"
            console.log(`🔄 Atualizando status para "Em Teste"...`);
            const updateMutation = `
              mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId
                  itemId: $itemId
                  fieldId: $fieldId
                  value: { singleSelectOptionId: $value }
                }) {
                  projectV2Item { 
                    id 
                  }
                }
              }
            `;
            
            await github.graphql(updateMutation, {
              projectId,
              itemId: projectItem.id,
              fieldId: statusFieldId,
              value: STATUS_EM_TESTE
            });
            
            console.log(`🎉 Sucesso!`);
            console.log(`   Issue #${originalIssue.number} (DevOps) → "Em Teste"`);
            console.log(`   Trigger: PR aberto em ${codeRepoOwner}/${codeRepoName}`);
            
            // 5. Comentar na issue original
            const prNumber = context.payload.pull_request.number;
            const prUrl = context.payload.pull_request.html_url;
            
            // 🧩 Monta o corpo base do comentário
            let commentBody = `🚀 Pull Request aberto: [#${prNumber}](${prUrl})\n\n🔄 Status atualizado para **Em Teste**`;
            
            // 👥 Adiciona menções dos responsáveis, se houver
            if (originalIssue.assignees && originalIssue.assignees.length > 0) {
              const mentions = originalIssue.assignees.map(a => `@${a.login}`).join(' ');
              commentBody += `\n\n👥 Notificando responsáveis: ${mentions}`;
            } else {
              commentBody += `\n\n👥 (Sem responsáveis atribuídos)`;
            }
            
            // 💬 Cria o comentário na issue original do DevOps
            await github.rest.issues.createComment({
              owner: 'Ambiente-de-Testes',
              repo: 'Repo-Test-DevOps',
              issue_number: originalIssue.number,
              body: commentBody
            });
            
            console.log(`💬 Comentário adicionado na issue original com menções`);
