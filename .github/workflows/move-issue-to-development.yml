name: Move Issue to Development

on:
  create:

jobs:
  update-project:
    if: github.ref_type == 'branch'
    runs-on: ubuntu-latest

    steps:
      - name: Extract issue number from branch name
        id: extract
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "🌿 Branch criada: $BRANCH_NAME"
          echo "📂 Repositório: ${{ github.repository }}"
          
          ISSUE_NUM=$(echo "$BRANCH_NAME" | grep -oE '[0-9]+' | head -1)
          
          if [ -n "$ISSUE_NUM" ]; then
            echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT
            echo "✅ Número extraído: #$ISSUE_NUM"
          else
            echo "⚠️ Nenhum número de issue encontrado no nome da branch"
            echo "issue_number=" >> $GITHUB_OUTPUT
          fi

      - name: Update Project Status
        if: steps.extract.outputs.issue_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEVSTATUS_TOKEN }}
          script: |
            try {
              const projectId = "PVT_kwDODixzhM4BFb_a";
              const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
              const STATUS_EM_DESENVOLVIMENTO = "823324b0";

              const issueNumber = ${{ steps.extract.outputs.issue_number }};
              const branchName = context.ref.replace('refs/heads/', '');
              const branchRepo = context.repo.owner + '/' + context.repo.repo;

              console.log(`🌿 Branch criada: ${branchName}`);
              console.log(`📂 Repositório da branch: ${branchRepo}`);
              console.log(`🔍 Procurando issue #${issueNumber}...`);

              const reposToSearch = [
                { owner: 'Ambiente-de-Testes', repo: 'Repo-Test-DevOps' },
                { owner: context.repo.owner, repo: context.repo.repo }
              ];

              const uniqueRepos = reposToSearch.filter(
                (repo, index, self) =>
                  index === self.findIndex(r => r.owner === repo.owner && r.repo === repo.repo)
              );

              let issue = null;
              let issueOwner = null;
              let issueRepo = null;

              // 🔎 Procura a issue
              for (const repo of uniqueRepos) {
                try {
                  console.log(`   Tentando ${repo.owner}/${repo.repo}...`);
                  const { data: foundIssue } = await github.rest.issues.get({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: issueNumber
                  });
                  issue = foundIssue;
                  issueOwner = repo.owner;
                  issueRepo = repo.repo;
                  console.log(`✅ Issue encontrada em ${issueOwner}/${issueRepo}!`);
                  console.log(`   Título: "${issue.title}"`);
                  console.log(`   URL: ${issue.html_url}`);
                  break;
                } catch (err) {
                  if (err.status === 404) {
                    console.log(`   ❌ Não encontrada em ${repo.owner}/${repo.repo}`);
                  } else {
                    throw err;
                  }
                }
              }

              if (!issue) {
                console.log(`⚠️ Issue #${issueNumber} não encontrada em nenhum repositório`);
                return;
              }

              const issueNodeId = issue.node_id;

              // 📊 Busca o projeto
              console.log(`📊 Buscando itens do projeto...`);
              const projectQuery = `
                query ($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      title
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue { 
                              id 
                              number 
                              title
                              repository { nameWithOwner }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery, { projectId });
              const items = projectData.node.items.nodes;
              console.log(`📋 Projeto: ${projectData.node.title}`);
              console.log(`📋 Total de itens: ${items.length}`);

              const projectItem = items.find(i => i.content?.id === issueNodeId);

              if (!projectItem) {
                console.log(`⚠️ Issue #${issueNumber} não está no projeto`);
                console.log(`   Adicione a issue ao projeto primeiro: ${issue.html_url}`);
                return;
              }

              console.log(`✅ Item encontrado no projeto`);
              console.log(`🔄 Atualizando status para "Em Desenvolvimento"...`);

              const updateMutation = `
                mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $value }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              
              await github.graphql(updateMutation, {
                projectId,
                itemId: projectItem.id,
                fieldId: statusFieldId,
                value: STATUS_EM_DESENVOLVIMENTO
              });
              
              console.log(`🎉 Sucesso!`);
              console.log(`   Issue #${issueNumber} (${issueOwner}/${issueRepo}) → "Em Desenvolvimento"`);
              console.log(`   Trigger: Branch "${branchName}" criada em ${branchRepo}`);
              
              // 💬 Comenta na issue
              let commentBody =
                branchRepo === `${issueOwner}/${issueRepo}`
                  ? `🌿 Branch \`${branchName}\` criada\n\n✅ Status atualizado para **Em Desenvolvimento**`
                  : `🌿 Branch \`${branchName}\` criada em **${branchRepo}**\n\n✅ Status atualizado para **Em Desenvolvimento**`;

              if (issue.assignees && issue.assignees.length > 0) {
                const mentions = issue.assignees.map(a => `@${a.login}`).join(' ');
                commentBody += `\n\n👥 Notificando responsáveis: ${mentions}`;
              } else {
                commentBody += `\n\n👥 (Sem responsáveis atribuídos)`;
              }

              await github.rest.issues.createComment({
                owner: issueOwner,
                repo: issueRepo,
                issue_number: issueNumber,
                body: commentBody
              });

              console.log(`💬 Comentário adicionado na issue com menções aos responsáveis`);
            } catch (error) {
              console.error("🚨 Erro inesperado:", error);
              core.setFailed(`Erro ao mover issue: ${error.message}`);
            }
