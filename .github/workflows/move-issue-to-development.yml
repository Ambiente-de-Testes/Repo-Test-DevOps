name: Move Issue to Development

on:
  create:

jobs:
  update-project:
    if: github.ref_type == 'branch'
    runs-on: ubuntu-latest
    steps:
      - name: Extract issue number from branch name
        id: extract
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "üåø Branch criada: $BRANCH_NAME"
          echo "üìÇ Reposit√≥rio: ${{ github.repository }}"
          
          # Tenta extrair n√∫mero da issue (formatos: issue-123, 123-fix-bug, feature/123, etc)
          ISSUE_NUM=$(echo "$BRANCH_NAME" | grep -oE '[0-9]+' | head -1)
          
          if [ -n "$ISSUE_NUM" ]; then
            echo "issue_number=$ISSUE_NUM" >> $GITHUB_OUTPUT
            echo "‚úÖ N√∫mero extra√≠do: #$ISSUE_NUM"
          else
            echo "‚ö†Ô∏è Nenhum n√∫mero de issue encontrado no nome da branch"
            echo "issue_number=" >> $GITHUB_OUTPUT
          fi
      
      - name: Update Project Status
        if: steps.extract.outputs.issue_number != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEVOPS_TOKEN }}
          script: |
            const projectId = "PVT_kwDODixzhM4BFb_a";
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
            const STATUS_EM_DESENVOLVIMENTO = "823324b0";
            
            const issueNumber = ${{ steps.extract.outputs.issue_number }};
            const branchName = context.ref.replace('refs/heads/', '');
            const branchRepo = context.repo.owner + '/' + context.repo.repo;
            
            console.log(`üåø Branch criada: ${branchName}`);
            console.log(`üìÇ Reposit√≥rio da branch: ${branchRepo}`);
            console.log(`üîç Procurando issue #${issueNumber}...`);

            // Lista de reposit√≥rios onde procurar a issue
            const reposToSearch = [
              { owner: 'Ambiente-de-Testes', repo: 'Repo-Test-DevOps' },
              { owner: context.repo.owner, repo: context.repo.repo }
            ];
            
            // Remove duplicatas
            const uniqueRepos = reposToSearch.filter((repo, index, self) =>
              index === self.findIndex(r => r.owner === repo.owner && r.repo === repo.repo)
            );

            let issue = null;
            let issueOwner = null;
            let issueRepo = null;

            try {
              // 1. Procura a issue em cada reposit√≥rio
              for (const repo of uniqueRepos) {
                try {
                  console.log(`   Tentando ${repo.owner}/${repo.repo}...`);
                  const { data: foundIssue } = await github.rest.issues.get({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: issueNumber
                  });
                  issue = foundIssue;
                  issueOwner = repo.owner;
                  issueRepo = repo.repo;
                  console.log(`‚úÖ Issue encontrada em ${issueOwner}/${issueRepo}!`);
                  console.log(`   T√≠tulo: "${issue.title}"`);
                  console.log(`   URL: ${issue.html_url}`);
                  break;
                } catch (err) {
                  if (err.status === 404) {
                    console.log(`   ‚ùå N√£o encontrada em ${repo.owner}/${repo.repo}`);
                  } else {
                    throw err;
                  }
                }
              }

              if (!issue) {
                console.log(`‚ö†Ô∏è Issue #${issueNumber} n√£o encontrada em nenhum reposit√≥rio`);
                return;
              }

              const issueNodeId = issue.node_id;

              // 2. Busca o projeto e seus itens
              console.log(`üìä Buscando itens do projeto...`);
              const projectQuery = `
                query ($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      title
                      items(first: 100) {
                        pageInfo {
                          hasNextPage
                          endCursor
                        }
                        nodes {
                          id
                          content {
                            ... on Issue { 
                              id 
                              number 
                              title
                              repository {
                                nameWithOwner
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery, { projectId });
              const items = projectData.node.items.nodes;
              console.log(`üìã Projeto: ${projectData.node.title}`);
              console.log(`üìã Total de itens: ${items.length}`);

              // 3. Encontra o item correspondente
              const projectItem = items.find(i => i.content?.id === issueNodeId);

              if (!projectItem) {
                console.log(`‚ö†Ô∏è Issue #${issueNumber} n√£o est√° no projeto`);
                console.log(`   Adicione a issue ao projeto primeiro: ${issue.html_url}`);
                return;
              }
              console.log(`‚úÖ Item encontrado no projeto`);

              // 4. Atualiza o status
              console.log(`üîÑ Atualizando status para "Em Desenvolvimento"...`);
              const updateMutation = `
                mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $value }
                  }) {
                    projectV2Item { 
                      id 
                    }
                  }
                }
              `;
              
              await github.graphql(updateMutation, {
                projectId,
                itemId: projectItem.id,
                fieldId: statusFieldId,
                value: STATUS_EM_DESENVOLVIMENTO
              });
              
              console.log(`üéâ Sucesso!`);
              console.log(`   Issue #${issueNumber} (${issueOwner}/${issueRepo}) ‚Üí "Em Desenvolvimento"`);
              console.log(`   Trigger: Branch "${branchName}" criada em ${branchRepo}`);
              
              // 5. Comentar na issue
              const commentBody = branchRepo === `${issueOwner}/${issueRepo}` 
                ? `üåø Branch \`${branchName}\` criada\n\n‚úÖ Status atualizado para **Em Desenvolvimento**`
                : `üåø Branch \`${branchName}\` criada em **${branchRepo}**\n\n‚úÖ Status atualizado para **Em Desenvolvimento**`;
              
              await github.rest.issues.createComment({
                owner: issueOwner,
                repo: issueRepo,
                issue_number: issueNumber,
                body: commentBody
              });
              console.log(`üí¨ Coment√°rio adicionado na issue`);
              
            } catch (error) {
              console.error(`‚ùå Erro: ${error.message}`);
              if (error.errors) {
                console.error('Detalhes:', JSON.stringify(error.errors, null, 2));
              }
              throw error;
            }
