name: Update Issues - Central

on:
  repository_dispatch:
    types: [branch_created]

jobs:
  update-project:
    runs-on: ubuntu-latest
    steps:
      - name: Log evento recebido
        run: |
          echo "üì° Evento recebido de outro reposit√≥rio"
          echo "   Reposit√≥rio: ${{ github.event.client_payload.repository }}"
          echo "   Branch: ${{ github.event.client_payload.branch }}"
          echo "   Issue: #${{ github.event.client_payload.issue_number }}"
          echo "   Sender: ${{ github.event.client_payload.sender }}"
          
      - name: Validar payload
        id: validate
        run: |
          if [ -z "${{ github.event.client_payload.issue_number }}" ]; then
            echo "‚ùå Nenhum n√∫mero de issue fornecido"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "valid=true" >> $GITHUB_OUTPUT
          
      - name: Update Project Status
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEVOPS_TOKEN }}
          script: |
            const projectId = "PVT_kwDODixzhM4BFb_a";
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
            const STATUS_EM_DESENVOLVIMENTO = "823324b0";
            
            const payload = context.payload.client_payload;
            const issueNumber = payload.issue_number;
            const repoFullName = payload.repository;
            const [owner, repo] = repoFullName.split('/');
            
            console.log(`üîç Processando issue #${issueNumber} de ${owner}/${repo}`);

            try {
              // 1. Busca a issue
              console.log(`üì• Buscando issue #${issueNumber}...`);
              const { data: issue } = await github.rest.issues.get({
                owner,
                repo,
                issue_number: issueNumber
              });
              console.log(`‚úÖ Issue encontrada: "${issue.title}"`);
              console.log(`   Node ID: ${issue.node_id}`);
              const issueNodeId = issue.node_id;

              // 2. Busca o projeto e seus itens
              console.log(`üìä Buscando itens do projeto...`);
              const projectQuery = `
                query ($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      title
                      items(first: 100) {
                        pageInfo {
                          hasNextPage
                          endCursor
                        }
                        nodes {
                          id
                          content {
                            ... on Issue { 
                              id 
                              number 
                              title
                              repository {
                                nameWithOwner
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery, { projectId });
              const items = projectData.node.items.nodes;
              console.log(`üìã Total de itens no projeto: ${items.length}`);
              
              // Log de debug dos itens
              items.forEach(item => {
                if (item.content) {
                  console.log(`   - Issue #${item.content.number} (${item.content.repository.nameWithOwner}): ID=${item.content.id}`);
                }
              });

              // 3. Encontra o item correspondente
              const projectItem = items.find(i => i.content?.id === issueNodeId);

              if (!projectItem) {
                console.log(`‚ö†Ô∏è Issue #${issueNumber} n√£o est√° no projeto ${projectData.node.title}`);
                console.log(`   Certifique-se de que a issue foi adicionada ao projeto primeiro`);
                return;
              }
              console.log(`‚úÖ Item encontrado no projeto (Item ID: ${projectItem.id})`);

              // 4. Atualiza o status
              console.log(`üîÑ Atualizando status para "Em Desenvolvimento"...`);
              const updateMutation = `
                mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $value }
                  }) {
                    projectV2Item { 
                      id 
                    }
                  }
                }
              `;
              
              await github.graphql(updateMutation, {
                projectId,
                itemId: projectItem.id,
                fieldId: statusFieldId,
                value: STATUS_EM_DESENVOLVIMENTO
              });
              
              console.log(`üéâ Status atualizado com sucesso!`);
              
            } catch (error) {
              console.error(`‚ùå Erro: ${error.message}`);
              if (error.errors) {
                console.error('Detalhes:', JSON.stringify(error.errors, null, 2));
              }
              throw error;
            }
