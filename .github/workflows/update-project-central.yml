name: Update Issues - Central

on:
  repository_dispatch:
    types: [branch_created]

jobs:
  update-project:
    runs-on: ubuntu-latest
    steps:
      - name: Log evento recebido
        run: |
          echo "üì° Evento recebido de outro reposit√≥rio"
          echo "   Reposit√≥rio origem (onde a branch foi criada): ${{ github.event.client_payload.repository }}"
          echo "   Branch: ${{ github.event.client_payload.branch }}"
          echo "   Issue: #${{ github.event.client_payload.issue_number }}"
          echo "   Issue Repository: ${{ github.event.client_payload.issue_repository }}"
          
      - name: Update Project Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEVOPS_TOKEN }}
          script: |
            const projectId = "PVT_kwDODixzhM4BFb_a";
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
            const STATUS_EM_DESENVOLVIMENTO = "823324b0";
            
            const payload = context.payload.client_payload;
            const issueNumber = payload.issue_number;
            
            // IMPORTANTE: A issue est√° no reposit√≥rio DevOps, n√£o no reposit√≥rio onde a branch foi criada
            const issueRepo = payload.issue_repository || 'Ambiente-de-Testes/Repo-Test-DevOps';
            const [issueOwner, issueRepoName] = issueRepo.split('/');
            
            // Reposit√≥rio onde a branch foi criada (para refer√™ncia)
            const branchRepo = payload.repository;
            
            console.log(`üîç Branch criada em: ${branchRepo}`);
            console.log(`üìã Issue #${issueNumber} localizada em: ${issueRepo}`);

            try {
              // 1. Busca a issue NO REPOSIT√ìRIO CORRETO (DevOps)
              console.log(`üì• Buscando issue #${issueNumber} em ${issueRepo}...`);
              const { data: issue } = await github.rest.issues.get({
                owner: issueOwner,
                repo: issueRepoName,
                issue_number: issueNumber
              });
              console.log(`‚úÖ Issue encontrada: "${issue.title}"`);
              console.log(`   Node ID: ${issue.node_id}`);
              console.log(`   URL: ${issue.html_url}`);
              const issueNodeId = issue.node_id;

              // 2. Busca o projeto e seus itens
              console.log(`üìä Buscando itens do projeto...`);
              const projectQuery = `
                query ($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      title
                      items(first: 100) {
                        pageInfo {
                          hasNextPage
                          endCursor
                        }
                        nodes {
                          id
                          content {
                            ... on Issue { 
                              id 
                              number 
                              title
                              repository {
                                nameWithOwner
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const projectData = await github.graphql(projectQuery, { projectId });
              const items = projectData.node.items.nodes;
              console.log(`üìã Total de itens no projeto: ${items.length}`);

              // 3. Encontra o item correspondente
              const projectItem = items.find(i => i.content?.id === issueNodeId);

              if (!projectItem) {
                console.log(`‚ö†Ô∏è Issue #${issueNumber} n√£o est√° no projeto ${projectData.node.title}`);
                console.log(`   Certifique-se de que a issue foi adicionada ao projeto primeiro`);
                return;
              }
              console.log(`‚úÖ Item encontrado no projeto (Item ID: ${projectItem.id})`);

              // 4. Atualiza o status
              console.log(`üîÑ Atualizando status para "Em Desenvolvimento"...`);
              const updateMutation = `
                mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $value }
                  }) {
                    projectV2Item { 
                      id 
                    }
                  }
                }
              `;
              
              await github.graphql(updateMutation, {
                projectId,
                itemId: projectItem.id,
                fieldId: statusFieldId,
                value: STATUS_EM_DESENVOLVIMENTO
              });
              
              console.log(`üéâ Status atualizado com sucesso!`);
              console.log(`   Issue #${issueNumber} movida para "Em Desenvolvimento"`);
              console.log(`   Trigger: Branch "${payload.branch}" criada em ${branchRepo}`);
              
            } catch (error) {
              console.error(`‚ùå Erro: ${error.message}`);
              if (error.errors) {
                console.error('Detalhes:', JSON.stringify(error.errors, null, 2));
              }
              throw error;
            }
