name: Update Issues - Central

on:
  repository_dispatch:
    types: [branch_created]

jobs:
  update-project:
    runs-on: ubuntu-latest
    steps:
      - name: Log evento recebido
        run: |
          echo "üì° Evento recebido de outro reposit√≥rio"
          echo "   Reposit√≥rio: ${{ github.event.client_payload.repository }}"
          echo "   Branch: ${{ github.event.client_payload.branch }}"
          echo "   Issue: #${{ github.event.client_payload.issue_number }}"
          
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.DEVOPS_TOKEN }}
          script: |
            const projectId = "PVT_kwDODixzhM4BFb_a";
            const statusFieldId = "PVTSSF_lADODixzhM4BFb_azg2xh6E";
            const STATUS_EM_DESENVOLVIMENTO = "823324b0";
            
            // Dados do payload
            const payload = context.payload.client_payload;
            const issueNumber = payload.issue_number;
            const repoFullName = payload.repository;
            const [owner, repo] = repoFullName.split('/');
            console.log(`üîç Processando issue #${issueNumber} de ${owner}/${repo}`);

            try {
              // Busca a issue via REST API no repo de origem
              const { data: issue } = await github.rest.issues.get({
                owner,
                repo,
                issue_number: issueNumber
              });
              console.log(`‚úÖ Issue encontrada: #${issue.number} - ${issue.title}`);
              const issueNodeId = issue.node_id;

              // Busca o item no projeto central
              const projectQuery = `
                query ($projectId: ID!) {
                  node(id: $projectId) {
                    ... on ProjectV2 {
                      title
                      items(first: 500) {
                        nodes {
                          id
                          content {
                            ... on Issue { id number title }
                            ... on PullRequest { id number title }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              const projectData = await github.graphql(projectQuery, { projectId });
              const items = projectData.node.items.nodes;
              const projectItem = items.find(i => i.content?.id === issueNodeId);

              if (!projectItem) {
                console.log(`‚ö†Ô∏è Issue #${issueNumber} n√£o est√° no projeto`);
                return;
              }
              console.log(`‚úÖ Item encontrado no projeto`);

              // Atualiza o status
              const updateMutation = `
                mutation ($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: String!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $value }
                  }) {
                    projectV2Item { id }
                  }
                }
              `;
              await github.graphql(updateMutation, {
                projectId,
                itemId: projectItem.id,
                fieldId: statusFieldId,
                value: STATUS_EM_DESENVOLVIMENTO
              });
              console.log(`üéâ Status atualizado com sucesso!`);
            } catch (error) {
              console.error(`‚ùå Erro: ${error.message}`);
              throw error;
            }
